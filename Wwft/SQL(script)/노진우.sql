SELECT * FROM calender WHERE event_no = 42 ;

ALTER TABLE WWFT.CALENDER ADD FREQ VARCHAR2(10);

ALTER TABLE WWFT.CALENDER ADD "by" VARCHAR2(10) NULL;

 INSERT INTO tree_image VALUES(1, '0', 'seed0_0.jpg' , 0, 100);
INSERT INTO tree_image VALUES(2, '0', 'seed0_1.jpg' ,101, 200);
INSERT INTO tree_image VALUES(3, '0', 'seed0_2.jpg' , 201, 300);
   
   

SELECT 
i.tree_image_name
FROM tree_image i, tree t
WHERE i.seed_no = t.seed_no
AND t.activity_total_point BETWEEN i.activity_point_start AND i.activity_point_end
AND t.tree_no = 1;

CREATE OR REPLACE VIEW MINFILE AS
SELECT a.post_no, i.save_image_name
from image_and_like i, (
select post_no,min(image_and_like_no) imgmin
FROM image_and_like
GROUP BY post_no) a
WHERE a.imgmin = i.image_and_like_no;


달력 오타 calender ==> calendar로 고칠것 반복일정 추가 되면서 freq: 반복주기 yearly,monthly,weekly //by_day : bymonthday, byweekday// dow : 0~6 월~일 // dom : 1~31
CREATE TABLE  "CALENDAR" 
   (	"EVENT_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"TREE_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"EVENT_TITLE" VARCHAR2(30) NOT NULL ENABLE, 
	"EVENT_START_DATE" DATE NOT NULL ENABLE, 
	"EVENT_END_DATE" DATE NOT NULL ENABLE, 
	"D_DAY_STATE" CHAR(1), 
	"EVENT_DETAIL" VARCHAR2(200), 
	"FREQ" VARCHAR2(10), 
	"BY_DAY" VARCHAR2(10), 
	"DOW" VARCHAR2(10), 
	"DOM" VARCHAR2(10), 
	"ALL_DAY" CHAR(1) DEFAULT 0, 
	 CONSTRAINT "CALENDAR_PK" PRIMARY KEY ("EVENT_NO") ENABLE 
   )수정후
   
   
     CREATE TABLE  "CALENDER" 
   (	"EVENT_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"TREE_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"EVENT_TITILE" VARCHAR2(30) NOT NULL ENABLE, 
	"EVENT_START_DATE" DATE NOT NULL ENABLE, 
	"EVENT_END_DATE" DATE NOT NULL ENABLE, 
	"D_DAY_STATE" CHAR(1), 
	"EVENT_DETAIL" VARCHAR2(200), 
	 CONSTRAINT "CALENDER_PK" PRIMARY KEY ("EVENT_NO") ENABLE); 수정전
	 
	 
	 ==>수정전 
	 CREATE TABLE  "ACTIVITY_POINT" 
   (	"ACTIVITY_POINT_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"TREE_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"POINT" NUMBER(10,0) NOT NULL ENABLE, 
	"ACTIVITY_DATE" DATE NOT NULL ENABLE, 
	"ACTIVITY_TYPE" CHAR(1) NOT NULL ENABLE, 
	 CONSTRAINT "ACTIVITY_POINT_PK" PRIMARY KEY ("ACTIVITY_POINT_NO") ENABLE   );
	 
	 
	 ==>수정후 target_no 기록 지울때 , 게시글번호 , 댓글 번호 등등 // treeNo fk 로 두고 계단식 삭제 
	 CREATE TABLE  "ACTIVITY_POINT" 
   (	"ACTIVITY_POINT_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"TREE_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"POINT" NUMBER(10,0) NOT NULL ENABLE, 
	"ACTIVITY_DATE" DATE NOT NULL ENABLE, 
	"ACTIVITY_TYPE" CHAR(1) NOT NULL ENABLE, 
	"TARGET_NO" NUMBER(10,0) NOT NULL ENABLE, 
	 CONSTRAINT "ACTIVITY_POINT_PK" PRIMARY KEY ("ACTIVITY_POINT_NO") ENABLE, 
	 CONSTRAINT "ACTIVITY_POINT_CON" FOREIGN KEY ("TREE_NO")
	  REFERENCES  "TREE" ("TREE_NO") ON DELETE CASCADE ENABLE 
   )
   
   ==> 알림메시지 수정 전  
       CREATE TABLE  "NOTICE_MESSAGE" 
   (	"NOTICE_MESSAGE_NO" NUMBER NOT NULL ENABLE, 
	"SENDER" VARCHAR2(30) NOT NULL ENABLE, 
	"RECEIVER" VARCHAR2(30) NOT NULL ENABLE, 
	"NOTICE_REG_DATE" DATE NOT NULL ENABLE, 
	"NOTICE_MESSAGE_STATE" CHAR(1) NOT NULL ENABLE, 
	"NOTICE_MESSAGE_TYPE" CHAR(1) NOT NULL ENABLE, 
	"NOTICE_MESSAGE_DETAIL" VARCHAR2(100), 
	"POST_IMAGE_NAME" VARCHAR2(30), 
	"NOTICE_MESSAGEBOX_STATE" CHAR(1) NOT NULL ENABLE, 
	"POST_NO" NUMBER, 
	"FOREST_NO" NUMBER, 
	"TREE_NO" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "NOTICE_MESSAGE_PK" PRIMARY KEY ("NOTICE_MESSAGE_NO") ENABLE );
	 
   
   ==>알림메시지 수정 후 messagebox_sate 삭제 why ? message_state로 해결 가능 default 0 첨에 들어갈때 0 조회 할때 1로 바뀌어서 상태가 0인거 찾아서 표현가능, detail 값 키움 
  	 CREATE TABLE  "NOTICE_MESSAGE" 
   (	"NOTICE_MESSAGE_NO" NUMBER NOT NULL ENABLE, 
	"SENDER" VARCHAR2(50), 
	"RECEIVER" VARCHAR2(50), 
	"NOTICE_REG_DATE" DATE NOT NULL ENABLE, 
	"NOTICE_MESSAGE_STATE" CHAR(1) DEFAULT 0 NOT NULL ENABLE, 
	"NOTICE_MESSAGE_TYPE" CHAR(1) NOT NULL ENABLE, 
	"NOTICE_MESSAGE_DETAIL" VARCHAR2(500), 
	"POST_NO" NUMBER, 
	"FOREST_NO" NUMBER, 
	"TREE_NO" NUMBER(38,0), 
	 CONSTRAINT "NOTICE_MESSAGE_PK" PRIMARY KEY ("NOTICE_MESSAGE_NO") ENABLE  );
	 
	 ==>IMAGE_AND_LIKE 수정 전
	CREATE TABLE  "IMAGE_AND_LIKE" 
   (	"IMAGE_AND_LIKE_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"IMAGE_NAME" VARCHAR2(50) NOT NULL ENABLE, 
	"POST_NO" NUMBER(10,0), 
	"LIKE_WRITER" VARCHAR2(30) NOT NULL ENABLE, 
	"IMAGE_AND_LIKE_STATE" CHAR(1) NOT NULL ENABLE, 
	 CONSTRAINT "IMAGE_AND_LIKE_PK" PRIMARY KEY ("IMAGE_AND_LIKE_NO") ENABLE );
	 
	==>IMAGE_AND_LIKE 수정 후 원본이름과 저장이름 
  CREATE TABLE  "IMAGE_AND_LIKE" 
   (	"IMAGE_AND_LIKE_NO" NUMBER(10,0) NOT NULL ENABLE, 
	"ORIGINAL_IMAGE_NAME" VARCHAR2(200) , 
	"SAVE_IMAGE_NAME" VARCHAR2(200) ,
	"DELETE_IMAGE_STATE" CHAR(1) ,
	"POST_NO" NUMBER(10,0) NOT NULL, 
	"LIKE_WRITER" VARCHAR2(30) , 
	"IMAGE_AND_LIKE_STATE" CHAR(1) NOT NULL ENABLE, 
	 CONSTRAINT "IMAGE_AND_LIKE_PK" PRIMARY KEY ("IMAGE_AND_LIKE_NO") ENABLE );

   
   
   
   tree_forest 없던거 추가 

  